@DataObject(generateConverter = true{{#parent}}, inheritConverter = true{{/parent}})
public class {{classname}} {{#parent}}extends {{{parent}}} {{/parent}}{{#interfaces}}{{#-first}}implements {{{.}}}{{/-first}}{{^-first}}, {{{.}}}{{/-first}}{{#-last}} {{/-last}}{{/interfaces}}{

{{#serializableModel}}
  private static final long serialVersionUID = 1L;
{{/serializableModel}}
  {{#vars}}
  {{#isEnum}}
  {{^isContainer}}{{>modelInnerEnum}}{{/isContainer}}
  {{#isContainer}}{{#mostInnerItems}}{{>modelInnerEnum}}{{/mostInnerItems}}{{/isContainer}}
  {{/isEnum}}
  private {{{datatypeWithEnum}}} {{name}}{{#defaultValue}} = {{{.}}}{{/defaultValue}};
  {{/vars}}

  public {{classname}} () {
  }

  public {{classname}} (JsonObject jsonObject) {
    {{classname}}Converter.fromJson(jsonObject, this);
  }
  {{#vars}}

  public {{{datatypeWithEnum}}} {{getter}}() {
    return {{name}};
  }
  
  {{^isReadOnly}}
  public void {{setter}}({{{datatypeWithEnum}}} {{name}}) {
    this.{{name}} = {{name}};
  }
  {{/isReadOnly}}
  {{/vars}}
  {{>additional_properties}}
  
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }{{#hasVars}}
      {{classname}} {{classVarName}} = ({{classname}}) o;
      return {{#vars}}{{#isByteArray}}Arrays{{/isByteArray}}{{^isByteArray}}Objects{{/isByteArray}}.equals(this.{{name}}, {{classVarName}}.{{name}}) {{#hasMore}} &&
             {{/hasMore}}{{/vars}}{{#parent}} && super.equals(o){{/parent}};{{/hasVars}}
      {{^hasVars}}return {{#parent}}super.equals(o){{/parent}}{{^parent}}true{{/parent}};{{/hasVars}}
  }

  @Override
  public int hashCode() {
    return Objects.hash({{#vars}}{{name}}{{#hasMore}}, {{/hasMore}}{{/vars}});
  }

  /**
   * Convert the given object to string with each line indented by 2 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n  ");
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class {{classname}} {\n");
    {{#lambdaRemoveLineBreak}}{{#parent}}sb.append("    ").append(toIndentedString(super.toString())).append("\n");{{/parent}}{{/lambdaRemoveLineBreak}}
    {{#vars}}sb.append("    {{name}}: ").append(toIndentedString({{name}})).append("\n");
    {{/vars}}sb.append("}");
    return sb.toString();
  }

  public JsonObject toJson() {
    JsonObject json = new JsonObject();
    {{classname}}Converter.toJson(this, json);
    return json;
  }
{{#discriminator}}
static {
  // Initialize and register the discriminator mappings.
  Map<String, Class<?>> mappings = new HashMap<String, Class<?>>();
  {{#mappedModels}}
  mappings.put("{{mappingName}}", {{modelName}}.class);
  {{/mappedModels}}
  mappings.put("{{name}}", {{classname}}.class);
  JSON.registerDiscriminator({{classname}}.class, "{{propertyBaseName}}", mappings);
}
{{/discriminator}}  
}
