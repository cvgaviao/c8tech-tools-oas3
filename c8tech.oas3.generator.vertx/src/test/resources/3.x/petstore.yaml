openapi: 3.0.0
servers:
  - url: 'http://petstore.swagger.io/v2'
info:
  description: >-
    This is a sample server Petstore server. For this sample, you can use the api key
    `special-key` to test the authorization filters.
  version: 1.0.0
  title: OpenAPI Petstore
  license:
    name: Apache-2.0
    url: 'https://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: pet
    description: Everything about your Pets
paths:
  /pet:
    get:
      tags:
        - pet
      summary: Finds Pets by status
      description: Multiple status values can be provided with comma separated strings
      operationId: findPetsByStatus
      parameters:
        - $ref: "#/components/parameters/ParamQ_JsonFilter"  
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid status value


components:
  parameters:
    ParamQ_JsonFilter:
      description: |
        'A JSON based query parameter logical and conditional filter.
        It supports the following Logical operators: 
         - "AND"
         - "OR"
         - "NOT"
        And supports the following Conditional operators:
         - "EQ"  - Equals to
         - "LT"  - Less than
         - "GT"  - Greater than   
         - "LTE" - Less than or equal to
         - "GTE" - Greater than or equal to   
        '
      in: query
      name: filter
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Criteria"
      examples:
        withAnd: 
          value: {"AND":[{"GTE":{"field1":"10"}},{"LT":{"field2":"20"}}]}
        withOr: 
          value: {"OR":[{"GTE":{"field1":"10"}},{"LT":{"field2":"20"}}]}
        withNot: 
          value: {"NOT":[{"GTE":{"field1":"10"}},{"LT":{"field2":"20"}}]}
    
  requestBodies:
    Pet:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Pet'
        application/xml:
          schema:
            $ref: '#/components/schemas/Pet'
      description: Pet object that needs to be added to the store
      required: true

  schemas:

    Criteria:
      oneOf:
#       - $ref: "#/components/schemas/ConditionalExpression"
       - $ref: "#/components/schemas/LogicalExpression"
      discriminator:
        propertyName: operator 
#      example:
#        AND:
#        - EQ:
#            field1: value1
#        - OR:
#          - LT:
#              field2: 20
#          - GT:
#              field2: 10
    
#    AbstractConditionalExpression:  
#      type: object
#      # note that this discriminator is aimed to the models that extends it using allOf.
#      discriminator:
#          propertyName: operator
#      required:
##        - operator
#        - field
#        - value
#      properties:
##        operator:
##          type: string
#        field:
#          type: string
#        value:
#          type: string
      
#    ConditionalExpression:
#      oneOf:
#        - $ref: "#/components/schemas/ConditionalExpressionEqualTo"
#        - $ref: "#/components/schemas/ConditionalExpressionLessThan"
#        - $ref: "#/components/schemas/ConditionalExpressionLessThanOrEqual"
#        - $ref: "#/components/schemas/ConditionalExpressionGreaterThan"
#        - $ref: "#/components/schemas/ConditionalExpressionGreaterThanOrEqual"
#      type: object
#      discriminator:
#        propertyName: operator
##      required:
##        - operator
##        - field
##        - value
##      properties:
##        operator:
##          type: string
##        field:
##          type: string
##        value:
##          type: string
#
#    ConditionalExpressionEqualTo:
#      allOf:
#        - $ref: "#/components/schemas/AbstractConditionalExpression"
#      type: object
#      required:
#        - operator
#      properties:
#        operator:
#          type: string
#          readOnly: true
#          default: EQ
#        
#    ConditionalExpressionGreaterThanOrEqual:
#      allOf:
#        - $ref: "#/components/schemas/AbstractConditionalExpression"
#      type: object
#      required:
#        - operator
#      properties:
#        operator:
#          type: string
#          readOnly: true
#          default: GTE
#      
#    ConditionalExpressionGreaterThan:
#      allOf:
#        - $ref: "#/components/schemas/AbstractConditionalExpression"
#      type: object
#      required:
#        - operator
#      properties:
#        operator:
#          type: string
#          readOnly: true
#          default: GT
#      
#    ConditionalExpressionLessThan:
#      allOf:
#        - $ref: "#/components/schemas/AbstractConditionalExpression"
#      type: object
#      required:
#        - operator
#      properties:
#        operator:
#          type: string
#          readOnly: true
#          default: LT
#      
#    ConditionalExpressionLessThanOrEqual:
#      allOf:
#        - $ref: "#/components/schemas/AbstractConditionalExpression"
#      type: object
#      required:
#        - operator
#      properties:
#        operator:
#          type: string
#          readOnly: true
#          default: LTE
      
    LogicalExpression:
      allOf:
        - $ref: "#/components/schemas/Criteria"
      oneOf:
#        - $ref: "#/components/schemas/AbstractLogicalExpression"
        - $ref: "#/components/schemas/LogicalExpressionAnd"
        - $ref: "#/components/schemas/LogicalExpressionOr"
        - $ref: "#/components/schemas/LogicalExpressionNot"
      type: object
      discriminator:
        propertyName: operator
      required:
        - operator
      properties:
        operator:
          type: string
        criterias:
          type: array
          items:
            $ref: "#/components/schemas/Criteria"

    AbstractLogicalExpression:  
      type: object
      # note that this discriminator is aimed to the models that extends it using allOf.
      discriminator:
        propertyName: operator
      required:
        - operator
      properties:
        operator:
          type: string
        criterias:
          type: array
          items:
            $ref: "#/components/schemas/Criteria"
          minimum: 1  
        
    LogicalExpressionAnd:
      allOf:
        - $ref: "#/components/schemas/AbstractLogicalExpression"
      type: object
      required:
        - operator
      properties:
        operator:
          type: string
          readOnly: true
          default: AND

    LogicalExpressionOr:
      allOf:
        - $ref: "#/components/schemas/AbstractLogicalExpression"
      type: object
      required:
        - operator
      properties:
        operator:
          type: string
          readOnly: true
          default: OR

    LogicalExpressionNot:
      allOf:
        - $ref: "#/components/schemas/AbstractLogicalExpression"
      type: object
      required:
        - operator
      properties:
        operator:
          type: string
          readOnly: true
          default: NOT
  
    Category:
      title: Pet category
      description: A category for a pet
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          pattern: '^[a-zA-Z0-9]+[a-zA-Z0-9\.\-_]*[a-zA-Z0-9]+$'
      xml:
        name: Category
    Tag:
      title: Pet Tag
      description: A tag for a pet
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        expression:  
          $ref: "#/components/schemas/LogicalExpression"
      xml:
        name: Tag
    Pet:
      title: a Pet
      description: A pet for sale in the pet store
      type: object
      required:
        - name
        - photoUrls
      properties:
        id:
          type: integer
          format: int64
        category:
          $ref: '#/components/schemas/Category'
        name:
          type: string
          example: doggie
        photoUrls:
          type: array
          xml:
            name: photoUrl
            wrapped: true
          items:
            type: string
        tags:
          type: array
          xml:
            name: tag
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
        status:
          type: string
          description: pet status in the store
          enum:
            - available
            - pending
            - sold
      xml:
        name: Pet
    
